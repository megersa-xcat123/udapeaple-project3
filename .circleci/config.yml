# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
orbs:
  slack: circleci/slack@4.12.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

commands:
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -yy less
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  
  install_nodejs:
    description: Install Nodejs 13
    steps:
      - run:
          name: Install NodeJS 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  
  install_awscli:
    description: Install AWSCLI
    steps:
      - run:
          name: Install AWSCLI
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here  
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:      
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>        
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure "https://kvdb.io/5dR7n4E8kRzBgGRhLTTrZu/migration_<< parameters.workflow_id >>")
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
  
jobs:
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            # Your code here
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  # build backend code
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
             # Your code here
             npm install
             npm run build
             # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
 # test font end 
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit test 
          working_directory: ./frontend
          command: npm install test
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results
    
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install test
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results
  ########
    
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanfrontend-build]
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command: |
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            
      - save_cache:
          paths: [frontend/node_modules]
          key: scanfrontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanbackend-build]
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command: | 
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            
      - save_cache:
          paths: [backend/node_modules]
          key: scanbackend-build

  ################
  deploy-infrastructure:
     docker:
      - image: cimg/base:stable
     steps:
      - checkout 
      - install_awscli
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip
            # sudo apt  install python3.7
            # curl -O https://bootstrap.pypa.io/get-pip.py
            # python3 get-pip.py --user
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 

                   
      - run:
          name: Add back-end ip to ansible inventory
          # working_directory: .circleci/ansible
          command: |
            cd .circleci/ansible 
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text  --filters Name=tag:Name,Values="udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" >> inventory.txt

            # aws ec2 describe-instances \
            #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            #   --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

# udapeople-388142339351
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      #  - image: python:3.9.0-alpine 
      - image: cimg/base:stable
    steps:
      - checkout #-code from git
      - add_ssh_keys:
          fingerprints: ["c3:d0:49:82:12:09:c2:5e:fa:6d:6b:4a:30:03:dc:ef"]
      - attach_workspace: #attach workspace
          at: ~/
      - install_ansible
      - install_awscli
  
      - run:
          name: Configure server
          # working_directory: .circleci/ansible
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
         
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
             curl --insecure https://kvdb.io/5dR7n4E8kRzBgGRhLTTrZu/migration_${CIRCLE_WORKFLOW_ID:0:7} -D '1'
          
            fi
      - destroy-environment
      - revert-migrations
    
     # Here's where you will add some code to rollback on failure 
  
  deploy-frontend:
    docker:
      - image: cimg/base:stable

      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c3:d0:49:82:12:09:c2:5e:fa:6d:6b:4a:30:03:dc:ef"]
      - attach_workspace: #attach workspace
          at: ~/
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL ="http://${BACKEND_IP}:3030"  >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure     
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c3:d0:49:82:12:09:c2:5e:fa:6d:6b:4a:30:03:dc:ef"]
      - attach_workspace: #attach workspace
          at: ~/
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            echo "Contents  of the inventory.txt file is -------"
            pwd
            # cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      #- checkut
      - install_nodejs
      - install_awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text )
            echo ${BACKEND_PUBLIC_IP}
            
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo ${BACKEND_PUBLIC_IP}
            echo backend-${CIRCLE_WORKFLOW_ID:0:7}
            echo ${API_URL}
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 0
            fi
      - run:
          name: frontend smoke test
          command: |
            FORNTEND_WEBSITE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com"
            echo $FORNTEND_WEBSITE
            if curl -s ${FORNTEND_WEBSITE} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
  
      - destroy-environment
      - revert-migrations
     
  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies / save old workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text )
            
            echo "Old Workflow ID: $OLD_WORFLOW_ID"
            curl https://kvdb.io/5dR7n4E8kRzBgGRhLTTrZu/old_workflow_id -d "${OLD_WORFLOW_ID}"
            # apt install -y tar gzip curl
            # curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            # apt install -y nodejs
            pwd
          
      - run:
          name: Update cloudfront distribution
           # working_directory.circleci/files.
          command: |
            # your code here
            pwd 
            ls -la
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 

      - destroy-environment
      - revert-migrations
      

  cleanup:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(https://kvdb.io/5dR7n4E8kRzBgGRhLTTrZu/old_workflow_id)
            echo Old workflow ID: $OldWorkflowID
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done... it already a lattest version"
            fi

workflows:
  workflow-project:
    jobs:
      - build-frontend
      - build-backend
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            -  build-frontend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
